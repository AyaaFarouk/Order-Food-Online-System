@model OrderFood.DAL.Entities.Models.Restaurant

@{
    ViewData["Title"] = "GetMenu";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Menu</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="~/css/Restaurant/vendor.css">
    <link rel="stylesheet" type="text/css" href="~/css/Restaurant/style.css">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;700&family=Open+Sans:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">
</head>

<body>
    <section class="py-5 overflow-hidden">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <!-- Section Header -->
                    <div class="section-header d-flex justify-content-between flex-wrap align-items-start mb-4">
                        <h2 class="section-title">Category</h2>

                        <div class="text-end">
                            <div class="d-flex align-items-center">
                                <a asp-action="GetAllCat" class="btn-link text-decoration-none">View All Categories →</a>
                                <div class="swiper-buttons">
                                    <button class="swiper-prev category-carousel-prev btn btn-yellow">❮</button>
                                    <button class="swiper-next category-carousel-next btn btn-yellow">❯</button>
                                </div>
                            </div>
                            <div class="mt-2">
                                <a asp-action="AddCategory" asp-route-restaurantId="@Model.Id" class="btn btn-outline-success btn-sm me-2 bi bi-plus-circle"> Add Category</a>
                                <button type="button" class="btn btn-outline-danger btn-sm bi bi-trash" onclick="toggleDeleteIcons()"> Delete Category</button>
                            </div>
                        </div>
                    </div>
                    <!-- End Header -->
                </div>
            </div>

            <!-- Search Form -->
            <form id="searchForm" class="row justify-content-center mb-4">
                <div class="col-md-3">
                    <input type="text" name="searchTerm" class="form-control" placeholder="Search meals..." oninput="searchMeals()">
                </div>
                <div class="col-md-2">
                    <input type="number" name="maxPrice" class="form-control" placeholder="Max price" step="0.01" oninput="searchMeals()">
                </div>
                <div class="col-md-2">
                    <select name="categoryId" class="form-select" onchange="searchMeals()">
                        <option value="">All Categories</option>
                        @foreach (var category in Model.Categories.Where(c => !c.IsDelete))
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>

            </form>

            <div class="row">
                <div class="col-md-12">
                    <div class="category-carousel swiper">
                        <div class="swiper-wrapper">
                            @foreach (var item in Model.Categories.Where(c => !c.IsDelete))
                            {
                                <div class="swiper-slide category-item nav-link text-center position-relative" data-category-id="@item.Id" style="cursor:pointer;" onclick="choose(this)">
                                    <img src="@item.Image" style="width: 100px; height: 100px; object-fit: cover;" />
                                    <h3 class="category-title">@item.Name</h3>

                                    <!-- AJAX delete button -->
                                    <button type="button"
                                            class="btn btn-sm btn-danger delete-category-btn position-absolute top-0 end-0 m-1 d-none"
                                            data-category-id="@item.Id"
                                            onclick="deleteCategory(this)">
                                        ❌
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                    <!-- Meals Section -->
                    <div id="mealsSection" class="container mt-5">
                        <h2 class="text-center mb-4">Meals</h2>
                        <div id="mealsContent" class="row justify-content-center">
                            <div class="text-muted text-center">Select a category to view its meals.</div>
                        </div>
                    </div>
                    <!-- End Meals Section -->
                </div>
            </div>
        </div>
    </section>

    <!-- CSRF Token Hidden -->
    <form id="csrfTokenForm">
        @Html.AntiForgeryToken()
    </form>

    <!-- Scripts -->

    <script src="~/js/Restaurant/jquery-1.11.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/Restaurant/script.js"></script>

    <script>

        function choose(element) {
            var categoryId = $(element).data('category-id');
            var restaurantId = @Model.Id;

            $('.category-item').removeClass('active-category');
            $(element).addClass('active-category');

            fetch('@Url.Action("GetCategoryMeals", "Restaurants")' + `?restaurantId=${restaurantId}&categoryId=${categoryId}`)
                .then(response => {
                    if (!response.ok) throw new Error("Failed to load meals");
                    return response.text();
                })
                .then(html => {
                    document.getElementById("mealsContent").innerHTML = html;
                })
                .catch(error => {
                    document.getElementById("mealsContent").innerHTML =
                        `<div class="text-danger text-center">${error.message}</div>`;
                });
        }

        function toggleDeleteIcons() {
            const icons = document.querySelectorAll('.delete-category-btn');
            icons.forEach(icon => icon.classList.toggle('d-none'));
        }

        function deleteCategory(button) {
            if (!confirm('Are you sure you want to delete this category?')) return;

            const categoryId = button.getAttribute('data-category-id');
            const token = document.querySelector('#csrfTokenForm input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("DeleteCategory", "Restaurants")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `id=${categoryId}&__RequestVerificationToken=${encodeURIComponent(token)}`
            })
            .then(response => {
                if (response.ok) {
                    // Remove the category from DOM
                    button.closest('.swiper-slide').remove();
                } else {
                    throw new Error("Failed to delete category");
                }
            })
            .catch(error => {
                alert(error.message);
            });
        }

        //---------------------------------------------
        let debounceTimer;

        function searchMeals() {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                const form = document.getElementById("searchForm");
                const formData = new FormData(form);
                const query = new URLSearchParams(formData).toString();

                // If input is empty, reset content
                if (!query || (!formData.get('maxPrice') && !formData.get('searchTerm') && !formData.get('categoryId'))) {
                    document.getElementById("mealsContent").innerHTML =
                        `<div class="text-muted text-center">Select a category to view its meals.</div>`;
                    return;
                }

                fetch(`@Url.Action("SearchMeals", "Restaurants")?restaurantId=@Model.Id&${query}`)
                    .then(res => {
                        if (!res.ok) throw new Error("Search failed");
                        return res.text();
                    })
                    .then(html => {
                        document.getElementById("mealsContent").innerHTML = html;
                    })
                    .catch(err => {
                        document.getElementById("mealsContent").innerHTML =
                            `<div class="text-danger text-center">${err.message}</div>`;
                    });
            }, 200); 
       
                   if (deleteMode) {
            document.querySelectorAll('.delete-category-btn').forEach(btn => {
                btn.classList.remove('d-none');
            });
        }

        }
        //----------------

         function loadMeals(restaurantId, searchTerm = "", categoryId = "", maxPrice = "", pageNo = 1) {
            $.ajax({
                url: 'Restaurants/SearchMeals',
                data: {
                    restaurantId,
                    searchTerm,
                    categoryId,
                    maxPrice,
                    PageNo: pageNo
                },
                success: function (result) {
                    $('#mealsContent').html(result);

                    bindDeleteButtons();
                },
                error: function () {
                    $('#mealsContent').html('<div class="text-danger text-center">Error loading meals.</div>');
                }
            });
                    if (deleteMode) {
            document.querySelectorAll('.delete-category-btn').forEach(btn => {
                btn.classList.remove('d-none');
            });
        }

        }


                function goToPage(pageNo) {
            const searchTerm = document.getElementById("currentSearchTerm").value;
            const maxPrice = document.getElementById("currentMaxPrice").value;
            const categoryId = document.getElementById("currentCategoryId").value;

            loadMeals(@Model.Id, searchTerm, categoryId, maxPrice, pageNo);
        }

            

    </script>
</body>
</html>
