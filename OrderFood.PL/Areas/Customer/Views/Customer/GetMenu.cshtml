@model OrderFood.DAL.Entities.Models.Restaurant

@{
    ViewData["Title"] = "GetMenu";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Menu</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="~/css/Restaurant/vendor.css">
    <link rel="stylesheet" type="text/css" href="~/css/Restaurant/style.css">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;700&family=Open+Sans:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
</head>

<body>
    <section class="container py-5 overflow-hidden">
        @if (TempData["AlertMessage"] != null)
        {
            <div class="alert alert-@(TempData["AlertType"] ?? "warning") alert-dismissible fade show" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                @TempData["AlertMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        <div class="m-3">
            @{
                await Html.RenderPartialAsync("_RestaurantReviewsPartial", ViewData["Reviews"]);
            }
        </div>
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <!-- Section Header -->
                    <div class="section-header d-flex justify-content-between flex-wrap align-items-start mb-4">
                        <h2 class="section-title">Category</h2>

                        <div class="text-end">
                            <div class="d-flex align-items-center">
                                <a asp-action="GetAllCat" asp-route-id="@Model.Id" class="btn-link text-decoration-none bg-secondary p-2 text-light rounded-2">View All Categories →</a>
                                <div class="swiper-buttons">
                                    <button class="swiper-prev category-carousel-prev btn btn-yellow">❮</button>
                                    <button class="swiper-next category-carousel-next btn btn-yellow">❯</button>
                                </div>
                            </div>
                           
                            
                            @if (User.IsInRole("Owner"))
                            {
                                <div class="mt-2">
                                    <a asp-action="AddCategory" asp-route-id="@Model.Id" class="btn btn-outline-success btn-sm me-2 bi bi-plus-circle"> Add Category</a>
                                    <button type="button" class="btn btn-outline-danger btn-sm bi bi-trash" onclick="toggleDeleteIcons()"> Delete Category</button>
                                </div>
                            }
                        </div>
                    </div>
                    <!-- End Header -->
                </div>
            </div>

            <!-- Search Form -->
            <form id="searchForm" class="row justify-content-center mb-4">
                <div class="col-md-3">
                    <input type="text" name="searchTerm" class="form-control" placeholder="Search meals..." oninput="searchMeals()">
                </div>
                <div class="col-md-2">
                    <input type="number" name="maxPrice" class="form-control" placeholder="Max price" step="0.01" oninput="searchMeals()">
                </div>
                <div class="col-md-2">
                    <select name="categoryId" class="form-select" onchange="searchMeals()">
                        <option value="">All Categories</option>
                        @foreach (var category in Model.Categories.Where(c => !c.IsDelete))
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>

            </form>

            <div class="row">
                <div class="col-md-12">
                    <div class="category-carousel swiper">
                        <div class="swiper-wrapper">
                            @foreach (var item in Model.Categories.Where(c => !c.IsDelete))
                            {
                                <div class="swiper-slide category-item nav-link text-center position-relative" data-category-id="@item.Id" style="cursor:pointer;" onclick="choose(this)">
                                    <img src="/@item.Image" style="width: 100px; height: 100px; object-fit: cover;" />
                                    <h3 class="category-title">@item.Name</h3>

                                    <!-- AJAX delete button -->
                                    <button type="button"
                                            class="btn btn-sm btn-danger delete-category-btn position-absolute top-0 end-0 m-1 d-none"
                                            data-category-id="@item.Id"
                                            onclick="deleteCategory(this)">
                                        ❌
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                    <!-- Meals Section -->
                    <div id="mealsSection" class="container mt-5">
                        <h2 class="text-center mb-4">Meals</h2>
                        <div id="mealsContent" class="row justify-content-center">
                            <div class="text-muted text-center p-2  rounded-2 text-light">Select a category to view its meals.</div>
                        </div>
                    </div>
                    <!-- End Meals Section -->
                </div>
            </div>
        </div>
    </section>

    <!-- CSRF Token Hidden -->
    <form id="csrfTokenForm">
        @Html.AntiForgeryToken()
    </form>

    <!-- Scripts -->

    <script src="~/js/Restaurant/jquery-1.11.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/Restaurant/script.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script>
        //  function updateFavourite(id, name, image, price, description) {
        //     const data = {
        //         Id: id,
        //         Name: name,
        //         Image: image,
        //         Price: price,
        //         Description: description
        //     };

        //     $.ajax({
        //         url: '/Customer/BasketFavourite/UpdateCustomerFavourite',
        //         type: 'POST',
        //         data: JSON.stringify(data),
        //         contentType: 'application/json',
        //         success: function (response) {
        //             if (response.success) {
        //                 location.reload();
        //                   Toastify({
        //             text: "Item added to watchlist!",
        //             duration: 3000,
        //             close: true,
        //             gravity: "top",
        //             position: "right",
        //             backgroundColor: "green",
        //         }).showToast();
        //             } else {
        //                 alert("Failed to update favourite.");
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //             console.error("Error updating favourite:", error);
        //             alert("Something went wrong!");
        //         }
        //     });
        // }

        function addToCart(id, name, image, price, description, quantity) {
           // let quantity = document.getElementById("Quntity").value;
           const data = {
                Id: id,
                Name: name,
                Image: image,
                Price: price,
                Description: description,
                Quantity: quantity
            };

            $.ajax({
                url: '/Customer/BasketFavourite/UpdateCustomerCart',
                type: 'POST',
                data: JSON.stringify(data),
                contentType: 'application/json',
                success: function (response) {
                    if (response.success) {
                        // location.reload();
                         Toastify({
                    text: "Item added to cart!",
                    duration: 3000,
                    close: true,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "green",
                }).showToast();
                    } else {
                        alert("Failed to update favourite.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error updating favourite:", error);
                    alert("Something went wrong!");
                }
            });
        }
        

            


        function choose(element) {
            var categoryId = $(element).data('category-id');
            var restaurantId = @Model.Id;

            $('.category-item').removeClass('active-category');
            $(element).addClass('active-category');

            fetch('@Url.Action("GetCategoryMeals", "Customer")' + `?restaurantId=${restaurantId}&categoryId=${categoryId}`)
                .then(response => {
                    if (!response.ok) throw new Error("Failed to load meals");
                    return response.text();
                })
                .then(html => {
                    document.getElementById("mealsContent").innerHTML = html;
                })
                .catch(error => {
                    document.getElementById("mealsContent").innerHTML =
                        `<div class="text-danger text-center">${error.message}</div>`;
                });
        }

        function toggleDeleteIcons() {
            const icons = document.querySelectorAll('.delete-category-btn');
            icons.forEach(icon => icon.classList.toggle('d-none'));
        }

        function deleteCategory(button) {
            if (!confirm('Are you sure you want to delete this category?')) return;

            const categoryId = button.getAttribute('data-category-id');
            const token = document.querySelector('#csrfTokenForm input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("DeleteCategory", "Restaurants")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `id=${categoryId}&__RequestVerificationToken=${encodeURIComponent(token)}`
            })
            .then(response => {
                if (response.ok) {
                    // Remove the category from DOM
                    button.closest('.swiper-slide').remove();
                } else {
                    throw new Error("Failed to delete category");
                }
            })
            .catch(error => {
                alert(error.message);
            });
        }

        //---------------------------------------------
        let debounceTimer;

        function searchMeals() {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                const form = document.getElementById("searchForm");
                const formData = new FormData(form);
                const query = new URLSearchParams(formData).toString();

                // If input is empty, reset content
                if (!query || (!formData.get('maxPrice') && !formData.get('searchTerm') && !formData.get('categoryId'))) {
                    document.getElementById("mealsContent").innerHTML =
                        `<div class="text-muted text-center">Select a category to view its meals.</div>`;
                    return;
                }

                fetch(`@Url.Action("SearchMeals", "Restaurants")?restaurantId=@Model.Id&${query}`)
                    .then(res => {
                        if (!res.ok) throw new Error("Search failed");
                        return res.text();
                    })
                    .then(html => {
                        document.getElementById("mealsContent").innerHTML = html;
                    })
                    .catch(err => {
                        document.getElementById("mealsContent").innerHTML =
                            `<div class="text-danger text-center">${err.message}</div>`;
                    });
            }, 300); // delay in ms

                   if (deleteMode) {
            document.querySelectorAll('.delete-category-btn').forEach(btn => {
                btn.classList.remove('d-none');
            });
        }

        }
        //----------------

         function loadMeals(restaurantId, searchTerm = "", categoryId = "", maxPrice = "", pageNo = 1) {
            $.ajax({
                url: 'Restaurants/SearchMeals',
                data: {
                    restaurantId,
                    searchTerm,
                    categoryId,
                    maxPrice,
                    PageNo: pageNo
                },
                success: function (result) {
                    $('#mealsContent').html(result);

                    // Re-bind delete category button events
                    bindDeleteButtons();
                },
                error: function () {
                    $('#mealsContent').html('<div class="text-danger text-center">Error loading meals.</div>');
                }
            });
                    if (deleteMode) {
            document.querySelectorAll('.delete-category-btn').forEach(btn => {
                btn.classList.remove('d-none');
            });
        }

        }


                function goToPage(pageNo) {
            const searchTerm = document.getElementById("currentSearchTerm").value;
            const maxPrice = document.getElementById("currentMaxPrice").value;
            const categoryId = document.getElementById("currentCategoryId").value;

            // Use your AJAX function
            loadMeals(@Model.Id, searchTerm, categoryId, maxPrice, pageNo);
        }

        //------------------------------

        function checkWatchlistStatus() {
            Get current user's watchlist from server
            $.ajax({
                url: '/Customer/BasketFavourite/GetCustomerFavouriteJson',
                type: 'GET',
                success: function (response) {
                    Reset all hearts to empty first
                    $('.bi-heart-fill').removeClass('bi-heart-fill').addClass('bi-heart');

                    If response contains watchlist data, fill hearts for items in watchlist
                    if (response && response.favouriteItems) {
                        response.favouriteItems.forEach(function(item) {
                            Find heart icon for this item and fill it
                            $(`[data-meal-id="${item.id}"] .bi-heart`).removeClass('bi-heart').addClass('bi-heart-fill');
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error checking watchlist status:", error);
                }
            });
        }

        // Enhanced updateFavourite function with toggle functionality
        function updateFavourite(id, name, image, price, description) {
            const heartIcon = $(`[data-meal-id="${id}"] .bi-heart, [data-meal-id="${id}"] .bi-heart-fill`);
            const isCurrentlyInWatchlist = heartIcon.hasClass('bi-heart-fill');

            if (isCurrentlyInWatchlist) {
                // Remove from watchlist
                removeFromWatchlist(id, heartIcon);
            } else {
                // Add to watchlist
                addToWatchlist(id, name, image, price, description, heartIcon);
            }
        }

        // Function to add item to watchlist
        function addToWatchlist(id, name, image, price, description, heartIcon) {
            const data = {
                Id: id,
                Name: name,
                Image: image,
                Price: price,
                Description: description
            };

            $.ajax({
                url: '/Customer/BasketFavourite/UpdateCustomerFavourite',
                type: 'POST',
                data: JSON.stringify(data),
                contentType: 'application/json',
                success: function (response) {
                    if (response.success) {
                        // Update heart icon to filled
                        heartIcon.removeClass('bi-heart').addClass('bi-heart-fill');

                        Toastify({
                            text: "Item added to watchlist!",
                            duration: 3000,
                            close: true,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "green",
                        }).showToast();
                    } else {
                        alert("Failed to add to watchlist.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error adding to watchlist:", error);
                    alert("Something went wrong!");
                }
            });
        }

        // Function to remove item from watchlist
        function removeFromWatchlist(id, heartIcon) {
            $.ajax({
                url: '/Customer/BasketFavourite/DeleteFavourite',
                type: 'POST',
                data: { Id: id },
                success: function (response) {
                    if (response.success) {
                        // Update heart icon to empty
                        heartIcon.removeClass('bi-heart-fill').addClass('bi-heart');

                        Toastify({
                            text: "Item removed from watchlist!",
                            duration: 3000,
                            close: true,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "orange",
                        }).showToast();
                    } else {
                        alert("Failed to remove from watchlist.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error removing from watchlist:", error);
                    alert("Something went wrong!");
                }
            });
        }

        // Call this function when page loads and after loading meals
        $(document).ready(function() {
            checkWatchlistStatus();
        });

        // Also call after loading category meals
        function choose(element) {
            var categoryId = $(element).data('category-id');
            var restaurantId = @Model.Id;

            $('.category-item').removeClass('active-category');
            $(element).addClass('active-category');

            fetch('@Url.Action("GetCategoryMeals", "Customer")' + `?restaurantId=${restaurantId}&categoryId=${categoryId}`)
                .then(response => {
                    if (!response.ok) throw new Error("Failed to load meals");
                    return response.text();
                })
                .then(html => {
                    document.getElementById("mealsContent").innerHTML = html;
                    // Check watchlist status for newly loaded meals
                    setTimeout(checkWatchlistStatus, 100);
                })
                .catch(error => {
                    document.getElementById("mealsContent").innerHTML =
                        `<div class="text-danger text-center">${error.message}</div>`;
                });
        }

        // Enhanced search function to maintain watchlist status
        function searchMeals() {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                const form = document.getElementById("searchForm");
                const formData = new FormData(form);
                const query = new URLSearchParams(formData).toString();

                if (!query || (!formData.get('maxPrice') && !formData.get('searchTerm') && !formData.get('categoryId'))) {
                    document.getElementById("mealsContent").innerHTML =
                        `<div class="text-muted text-center">Select a category to view its meals.</div>`;
                    return;
                }

                fetch(`@Url.Action("SearchMeals", "Restaurants")?restaurantId=@Model.Id&${query}`)
                    .then(res => {
                        if (!res.ok) throw new Error("Search failed");
                        return res.text();
                    })
                    .then(html => {
                        document.getElementById("mealsContent").innerHTML = html;
                        // Check watchlist status for search results
                        setTimeout(checkWatchlistStatus, 100);
                    })
                    .catch(err => {
                        document.getElementById("mealsContent").innerHTML =
                            `<div class="text-danger text-center">${err.message}</div>`;
                    });
            }, 300);
        }


    </script>
</body>
</html>

