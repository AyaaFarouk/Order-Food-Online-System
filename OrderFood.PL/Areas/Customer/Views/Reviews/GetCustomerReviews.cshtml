@model IEnumerable<OrderFood.DAL.Entities.Models.Review>

@{
    ViewData["Title"] = "Customer Reviews";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.AntiForgeryToken()

<section class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="display-6 text-success">
            <i class="bi bi-chat-square-text me-2"></i>My Reviews
        </h1>
    </div>

    @if (Model.Any())
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var item in Model)
            {
                <div class="col" id="review-@item.Id">
                    <div class="card h-100 shadow-sm border-0">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <h5 class="card-title mb-0">@item.Restaurant?.Name</h5>
                                <small class="text-muted">@item.ReviewDate.ToString("MMM dd, yyyy")</small>
                            </div>

                            <div class="text-warning mb-3">
                                @for (var i = 0; i < item.Rate; i++)
                                {
                                    <i class="bi bi-star-fill"></i>
                                }
                                @for (var i = item.Rate; i < 5; i++)
                                {
                                    <i class="bi bi-star"></i>
                                }
                                <span class="text-muted small ms-1">(@item.Rate/5)</span>
                            </div>

                            <div class="card-text mb-3" style="min-height: 60px;">
                                @if (item.Comment.Length > 100)
                                {
                                    <span class="d-inline-block" data-bs-toggle="tooltip" title="@item.Comment">
                                        @item.Comment.Substring(0, 100)...
                                    </span>
                                }
                                else
                                {
                                    @item.Comment
                                }
                            </div>

                            <div class="d-flex justify-content-end">
                                <div class="btn-group btn-group-sm" role="group">
                                    <a asp-action="EditReview" asp-route-id="@item.Id" class="btn btn-outline-primary" title="Edit">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                    <button type="button" class="btn btn-outline-danger delete-review-btn" data-id="@item.Id" title="Delete">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info mt-4">
            <i class="bi bi-info-circle"></i> No reviews found.
        </div>
    }
</section>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const deleteButtons = document.querySelectorAll('.delete-review-btn');

            deleteButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const reviewId = this.getAttribute('data-id');
                    const confirmed = confirm("Are you sure you want to delete this review?");
                    if (!confirmed) return;

                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    fetch(`/Customer/Reviews/DeleteReview/${reviewId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        }
                    })
                    .then(response => {
                        if (response.ok) {
                            document.getElementById(`review-${reviewId}`).remove();
                        } else {
                            alert("Failed to delete the review.");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("An error occurred while deleting the review.");
                    });
                });
            });

            // Initialize Bootstrap tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}

<style>
    .card {
        border-radius: 0.5rem;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .card:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

    .card-title {
        font-weight: 500;
    }

    .card-text {
        color: #495057;
    }

    .btn-group-sm .btn {
        padding: 0.25rem 0.5rem;
    }

    @@media (max-width: 767.98px) {
        .display-6 {
            font-size: 1.5rem;
        }

        .card-text {
            min-height: auto !important;
        }
    }
</style>
