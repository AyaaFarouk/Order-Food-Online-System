@using OrderFood.PL.Areas.Customer.Models
@model CheckoutVM

<div class="bg-body-tertiary">
    <div class="container mt-2 py-5 bg-light shadow-sm rounded-2" style="background-color:white !important;">
        <main>
            <div class="pb-3 text-center">
                <h1 class="h2">Checkout form</h1>
            </div>

            <div class="row g-5">
                <div class="col-md-5 col-lg-4 order-md-last">
                    <h4 class="d-flex justify-content-between align-items-center mb-3">
                        <span class="text-primary">Your cart</span>
                        <span class="badge bg-primary rounded-pill">@Model.CartItems.Sum(item => item.Quantity)</span>
                    </h4>

                    <ul class="list-group mb-3">
                        @foreach (var item in Model.CartItems)
                        {
                            <li class="list-group-item d-flex justify-content-between lh-sm">
                                <div>
                                    <h6 class="my-0">@item.Meal.Name</h6>
                                    <small class="text-body-secondary">Quantity: @item.Quantity</small>
                                </div>
                                <span class="text-body-secondary">$@item.TotalPrice</span>
                            </li>
                        }

                        <input type="hidden" name="CouponId" id="coupon-id" value="@Model.CouponId" />

                        <li class="list-group-item d-flex justify-content-between lh-sm">
                            <div>
                                <h6 class="my-0 text-danger">Delivery Fee</h6>
                            </div>
                            <span class="text-danger">+$5</span>
                        </li>

                        <li class="list-group-item d-flex justify-content-between bg-body-tertiary" id="promo-display" style="display: none;">
                            <div class="text-success">
                                <h6 class="my-0">Promo code</h6>
                                <small id="promo-label"></small>
                            </div>
                            <span class="text-success" id="promo-discount">−$0</span>
                        </li>

                        <li class="list-group-item d-flex justify-content-between">
                            <span>Total</span>
                            <strong id="checkout-total">$@Model.Total</strong>
                        </li>
                    </ul>

                    <form class="card p-2" id="coupon-form">
                        <div class="input-group">
                            <input name="Coupon" type="text" class="form-control" id="coupon-code" placeholder="Promo code">
                            <button type="submit" class="btn btn-secondary">Apply</button>
                        </div>
                    </form>
                </div>

                <div class="col-md-7 col-lg-8">
                    <h4 class="mb-3">Billing address</h4>
                    <form id="submitForm" asp-action="MakeOrder" asp-controller="Orders" method="post" class="needs-validation" novalidate>
                        <input asp-for="Total" type="hidden" id="order-total" />
                        <input asp-for="RestaurantId" type="hidden" />
                        <input name="CouponId" type="text" class="form-control" id="Coupon2" placeholder="Promo code" hidden>

                        <div class="row g-3">
                            <div class="col-sm-6">
                                <label for="firstName" class="form-label">First name</label>
                                <input type="text" class="form-control" id="firstName" name="FirstName"
                                       value="@Model.FirstName" required>
                                <div class="invalid-feedback">Valid first name is required.</div>
                            </div>

                            <div class="col-sm-6">
                                <label for="lastName" class="form-label">Last name</label>
                                <input name="LastName" type="text" class="form-control" id="lastName"
                                       value="@Model.LastName" required>
                                <div class="invalid-feedback">Valid last name is required.</div>
                            </div>

                            <div class="col-12">
                                <label for="username" class="form-label">Username</label>
                                <div class="input-group has-validation">
                                    <input type="text" class="form-control" id="username" name="Username"
                                           value="@Model.UserName" required>
                                    <div class="invalid-feedback">Your username is required.</div>
                                </div>
                            </div>

                            <div class="col-12">
                                <label for="email" class="form-label">Email <span class="text-body-secondary">(Optional)</span></label>
                                <input type="email" class="form-control" id="email" name="Email"
                                       value="@Model.Email" placeholder="you@example.com">
                                <div class="invalid-feedback">Please enter a valid email address.</div>
                            </div>

                            <div class="col-12">
                                <label for="address" class="form-label">Address</label>
                                <input name="ShippingAddress" type="text" class="form-control" id="address"
                                       value="@Model.Address" placeholder="1234 Main St" required>
                                <div class="invalid-feedback">Please enter your shipping address.</div>
                            </div>

                            <div class="col-12">
                                <label for="address2" class="form-label">Address 2 <span class="text-body-secondary">(Optional)</span></label>
                                <input type="text" class="form-control" id="address2" placeholder="Apartment or suite">
                            </div>

                        </div>

                        <br />
                        <h4 class="mb-3">Payment</h4>

                        <div class="my-3">
                            <input id="cash" name="PaymentMethod" type="radio" class="form-check-input" value="Cash" required checked>
                            <label class="form-check-label me-3" for="cash">Cash</label>

                            <input id="creditcard" name="PaymentMethod" type="radio" class="form-check-input" value="CreditCard" required>
                            <label class="form-check-label" for="creditcard">Credit Card</label>
                        </div>

                        <div class="row gy-3" id="card-info" style="display:none;">
                            <div class="col-md-6">
                                <label for="cc-name" class="form-label">Name on card</label>
                                <input type="text" class="form-control" id="cc-name" placeholder="">
                                <small class="text-body-secondary">Full name as displayed on card</small>
                                <div class="invalid-feedback">Name on card is required</div>
                            </div>

                            <div class="col-md-6">
                                <label for="cc-number" class="form-label">Credit card number</label>
                                <input type="text" class="form-control" id="cc-number" placeholder="">
                                <div class="invalid-feedback">Credit card number is required</div>
                            </div>

                            <div class="col-md-3">
                                <label for="cc-expiration" class="form-label">Expiration</label>
                                <input type="text" class="form-control" id="cc-expiration" placeholder="">
                                <div class="invalid-feedback">Expiration date required</div>
                            </div>

                            <div class="col-md-3">
                                <label for="cc-cvv" class="form-label">CVV</label>
                                <input type="text" class="form-control" id="cc-cvv" placeholder="">
                                <div class="invalid-feedback">Security code required</div>
                            </div>
                        </div>

                        <hr class="my-4">
                        <button class="w-100 btn btn-secondary btn-lg" type="submit">Continue to checkout</button>
                    </form>
                </div>
            </div>
        </main>
    </div>
</div>

@section Styles {
    <link href="~/css/customer/checkout.css" rel="stylesheet" />
}

@section Scripts {
    <script src="~/js/customer/checkout.js"></script>

    <script>
        document.getElementById("coupon-form").addEventListener("submit", function (e) {
            e.preventDefault();
            var nameValue = document.getElementById("coupon-code").value;
            document.getElementById("Coupon2").value = nameValue;
        });

        // Update hidden inputs before submission
        document.getElementById("submitForm").addEventListener("submit", function () {
            const total = document.getElementById("checkout-total")?.textContent?.replace('$', '') || "0";
            document.getElementById("order-total").value = total;
        });

        // Show/hide credit card info
        document.querySelectorAll("input[name='PaymentMethod']").forEach(radio => {
            radio.addEventListener("change", function () {
                const isCard = this.value === "CreditCard";
                const cardInfo = document.getElementById("card-info");
                cardInfo.style.display = isCard ? "block" : "none";

                // Toggle required
                cardInfo.querySelectorAll("input").forEach(input => {
                    input.required = isCard;
                });
            });
        });

               document.getElementById("coupon-form")?.addEventListener("submit", function (e) {
            e.preventDefault();

            const code = document.getElementById("coupon-code").value;
            const totalElement = document.getElementById("checkout-total");
            const promoDisplay = document.getElementById("promo-display");
            const promoLabel = document.getElementById("promo-label");
            const promoDiscount = document.getElementById("promo-discount");

            // Calculate subtotal (sum of all cart items) + delivery fee
            let subtotal = @Model.CartItems.Sum(item => item.Meal.Price * item.Quantity);
            const deliveryFee = 5;
            let totalBeforeDiscount = subtotal + deliveryFee; // Include delivery in discountable amount

            fetch(`/Customer/Orders/CheckCoupon?couponCode=${encodeURIComponent(code)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.isValid) {
                        // Calculate discount amount (applied to subtotal + delivery)
                        const discountAmount = (totalBeforeDiscount * data.discount) / 100;
                        // Calculate new total (subtotal + delivery - discount)
                        const newTotal = totalBeforeDiscount - discountAmount;

                        promoDisplay.style.display = 'flex';
                        promoLabel.textContent = code;
                        promoDiscount.textContent = `−$${discountAmount.toFixed(2)}`;
                        totalElement.textContent = `$${newTotal.toFixed(2)}`;

                        // Update hidden fields
                        document.getElementById("coupon-id").value = data.couponId;
                        document.getElementById("Coupon2").value = code;
                    } else {
                        alert("Invalid or expired promo code.");
                        promoDisplay.style.display = 'none';
                        // Reset to original total (subtotal + delivery)
                        totalElement.textContent = `$${totalBeforeDiscount.toFixed(2)}`;
                        document.getElementById("coupon-id").value = '';
                        document.getElementById("Coupon2").value = '';
                    }
                })
                .catch(error => {
                    console.error("Error checking coupon:", error);
                    alert("Something went wrong.");
                });
        });

        // Initialize the total on page load
        document.addEventListener('DOMContentLoaded', function() {
            const subtotal = @Model.CartItems.Sum(item => item.Meal.Price * item.Quantity);
            const deliveryFee = 5;
            const initialTotal = subtotal + deliveryFee;
            document.getElementById("checkout-total").textContent = `$${initialTotal.toFixed(2)}`;
            document.getElementById("order-total").value = initialTotal.toFixed(2);
        });
        // Set cash as default payment method
        document.getElementById("cash").checked = true;
    </script>
}